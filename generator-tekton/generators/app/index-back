const Generator = require("yeoman-generator");
const path = require("path");
const fs = require("fs");

const { fileListtekton } = require("./assets/filesList");

module.exports = class extends Generator {
  constructor(args, opts) {
    super(args, opts);

    if (opts.file) {
      const filePath = path.resolve(opts.file);
      const fileContents = fs.readFileSync(filePath, "utf8");
      const options = JSON.parse(fileContents);
      this.options = options;
    }
  }

  writing() {
    const copyOpts = {
      globOptions: {
        ignore: []
      }
    };

    const options = this.options;
    this.log(options);

    try {
      switch (options.cloudProvider) {
        case "aws":
        case "azure":
        case "minikube":
          this.log(`${options.cloudProvider} Generator`);

          // Generate shared files (e.g., account, pipeline script, README.md)
          this._generateSharedFiles(fileListtekton, options, copyOpts);

          // Generate component-specific files
          options.componentName.forEach(component => {
            this._generateComponentSpecificFiles(
              fileListtekton,
              { ...options, componentName: component },
              copyOpts
            );
          });
          break;
        default:
          console.log(
            `Sorry, ${options.cloudProvider} cloud is not supported.`
          );
      }
    } catch (error) {
      this.log(error);
    }
  }

  _generateSharedFiles(fileList, opts, copyOpts) {
    const sharedFiles = fileList.filter(file => 
      file.startsWith("account/") || 
      file === "README.md" || 
      file === "pipeline-script.sh"
    );

    sharedFiles.forEach(file => {
      this.fs.copyTpl(
        this.templatePath(file),
        this.destinationPath(`tekton-cicd/${file}`),
        opts,
        copyOpts
      );
    });
  }

  _generateComponentSpecificFiles(fileList, opts, copyOpts) {
    const componentFiles = fileList.filter(file =>
      !file.startsWith("account/") &&
      file !== "README.md" &&
      file !== "pipeline-script.sh"
    );

    componentFiles.forEach(file => {
      // Append component name to relevant filenames
      const destinationFile = file.replace(
        /\.yml$/,
        `-${opts.componentName}.yml`
      );

      this.fs.copyTpl(
        this.templatePath(file),
        this.destinationPath(`tekton-cicd/${destinationFile}`),
        opts,
        copyOpts
      );
    });
  }

  install() {
    this.log("Tekton files generation completed...");
  }
};

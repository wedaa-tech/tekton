apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: test-cases
  namespace: <%= namespaceName %>
spec:
  workspaces:
    - name: source
  results:
    - name: test-status
    - name: coverage
    - name: test-summary
  params:
    - name: clone-dir
      type: string
    - name: git-branch
      type: string
  steps:
    - name: setup-jdk-17
      image: openjdk:17-jdk-slim
      script: |
        export JAVA_HOME=/opt/java/openjdk
        export PATH=$JAVA_HOME/bin:$PATH
        java -version

    - name: build-with-maven
      image: maven:3.9.4-eclipse-temurin-17
      script: |
        cd /workspace/source/$(params.clone-dir)
        ls
        branchName=$(echo "$(params.git-branch)" | sed 's|^refs/heads/||')
        case "$branchName" in
                "development")
                export ENV=development
                  ;;
                "qa")
                export ENV=qa
                  ;;
                "staging")
                export ENV=staging
                  ;;
                *)
                  echo "Branch not supported: $(params.git-branch)"
                  exit 1
                  ;;
              esac
        mvn clean test -DsuiteXmlFile=run.xml -Denv=dev | tee /workspace/source/$(params.clone-dir)/mvn_output.txt

    - name: set-current-date
      image: bash:latest
      script: |
        echo "DATE_STR=$(date +'%Y-%m-%d')" > /workspace/source/$(params.clone-dir)/date.txt

    - name: extract-test-status-and-coverage
      image: bash:latest
      script: |
        # Extract test results (test status) from Maven output
        if grep -q "BUILD SUCCESS" /workspace/source/$(params.clone-dir)/mvn_output.txt; then
          echo "Test succeeded"
          echo -n "0" > /tekton/results/test-status
        else
          echo "Test failed"
          echo -n "1" > /tekton/results/test-status
        fi

        # Extract coverage from the Maven output (assuming a tool like JaCoCo is used for test coverage)
        COVERAGE=$(grep -Eo 'Coverage: \K[0-9]+' /workspace/source/$(params.clone-dir)/mvn_output.txt || echo "0")
        echo "Test coverage: $COVERAGE%"
        echo -n "$COVERAGE" > /tekton/results/coverage

    - name: change-png-paths
      image: bash:latest
      script: |
        DATE_STR=$(cat /workspace/source/$(params.clone-dir)/date.txt | cut -d'=' -f2)
        ls /workspace/source/$(params.clone-dir)/
        sed -i 's|file:////workspace/source/$(params.clone-dir)//TestResults//${DATE_STR}//\([^"]*\)|./\1|g' /workspace/source/$(params.clone-dir)/TestResults/${DATE_STR}/*.html
        sed -i 's|/workspace/source/$(params.clone-dir)//TestResults//${DATE_STR}//\([^"]*\)|./\1|g' /workspace/source/$(params.clone-dir)/TestResults/${DATE_STR}/*.html

    - name: extract-test-summary
      image: bash:latest
      script: |
        # Define a pattern for matching test summary
        pattern="Tests run: ([0-9]+), Failures: ([0-9]+), Errors: ([0-9]+), Skipped: ([0-9]+)"

        # Extract the summary from the Maven output
        summary=$(grep -Eo "Tests run: [0-9]+, Failures: [0-9]+, Errors: [0-9]+, Skipped: [0-9]+" /workspace/source/$(params.clone-dir)/mvn_output.txt | head -n 1)

        echo "Extracted summary: $summary"

        # If the summary is found, output it
        if [[ -n "$summary" ]]; then
          echo "$summary"
          echo -n "$summary" > /tekton/results/test-summary
        else
          echo "Test summary not found"
          echo -n "Test summary not found" > /tekton/results/test-summary
        fi

    - name: zip-current-test-report
      image: alpine:latest
      script: |
        apk update && apk add zip
        DATE_STR=$(cat /workspace/source/$(params.clone-dir)/date.txt | cut -d'=' -f2)
        cd /workspace/source/$(params.clone-dir)
        zip -r test-report-${DATE_STR}.zip TestResults/${DATE_STR}

    - name: echo-zip
      image: bash:latest
      script: |
        echo "echoing where is zip file"
        ls /workspace/source/$(params.clone-dir)

    - name: send-email-with-sparkpost
      image: python:3.9
      env:
        - name: SPARKPOST_SMTP_HOST
          value: smtp.sparkpostmail.com
        - name: SPARKPOST_SMTP_PORT
          value: "587"
        - name: SPARKPOST_SMTP_USERNAME
          value: SMTP_Injection
        - name: SPARKPOST_SMTP_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sparkpost-secret
              key: api-key
        - name: FROM_EMAIL
          value: support@premiumparking.com
        - name: TO_EMAIL_1
          value: sivakumar.kurnool@xebia.com
        - name: TO_EMAIL_2
          value: sk800489@gmail.com
      script: |
        # Read DATE_STR from date.txt
        DATE_STR=$(cat /workspace/source/$(params.clone-dir)/date.txt | cut -d'=' -f2)
        export DATE_STR
        cd /workspace/source/$(params.clone-dir)
        python3 send_email_sparkpost.py

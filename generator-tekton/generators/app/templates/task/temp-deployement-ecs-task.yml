apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: temp-ecs-deploy
  namespace: <%= namespaceName %>
spec:
  params:
    - name: commit_sha
      type: string
    - name: AWS_ACCESS_KEY_ID
      type: string
    - name: AWS_SECRET_ACCESS_KEY
      type: string
    - name: AWS_SESSION_TOKEN
      type: string
    - name: repoUrl
      type: string
    - name: ecs-cluster-name
      type: string
    - name: serviceName
      type: string
    - name: clone-dir
      type: string
  workspaces:
    - name: source
    - name: docker-config
  steps:
    - name: update-service
      image: amazon/aws-cli:latest
      env:
        - name: AWS_ACCESS_KEY_ID
          value: "$(params.AWS_ACCESS_KEY_ID)"
        - name: AWS_SECRET_ACCESS_KEY
          value: "$(params.AWS_SECRET_ACCESS_KEY)"
        - name: AWS_SESSION_TOKEN
          value: "$(params.AWS_SESSION_TOKEN)"
      script: |
        echo "Installing jq..."
        yum install -y jq > /dev/null 2>&1

        echo "Processing service: $(params.serviceName)"

        # Fetch the current task family for the service
        task_family=$(aws ecs describe-services --cluster $(params.ecs-cluster-name) --services $(params.serviceName) --query 'services[0].taskDefinition' --output text | sed 's|.*/||; s|:.*||')
        echo "Fetched task family for $(params.serviceName): $task_family"

        # Save the current task definition ARN to shared workspace for rollback
        rm /workspace/source/$(params.serviceName)-prev-task-def-arn.txt
        echo $(aws ecs describe-services --cluster $(params.ecs-cluster-name) --services $(params.serviceName) --query 'services[0].taskDefinition' --output text) >> /workspace/source/$(params.serviceName)-prev-task-def-arn.txt

        cat /workspace/source/$(params.serviceName)-prev-task-def-arn.txt

        # Fetch the current ECS task definition for the service
        task_def=$(aws ecs describe-task-definition --task-definition $task_family --region us-east-2)

        echo "Fetched task def"

        # Clean up the task definition by removing unnecessary fields that are automatically generated
        cleaned_task_def=$(echo $task_def | jq '.taskDefinition | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')

        # Update the container image with the new image URL and commit SHA
        new_task_def=$(echo $cleaned_task_def | jq --arg image "$(params.repoUrl):$(params.commit_sha)" '.containerDefinitions[0].image = $image')

        echo "Updated task def with new Docker image $(params.repoUrl):$(params.commit_sha)"

        # Register a new revision of the ECS task definition for the service
        new_task_def_arn=$(aws ecs register-task-definition --family $task_family --cli-input-json "$new_task_def" --query 'taskDefinition.taskDefinitionArn' --output text)

        echo "New task definition revision ARN for service $(params.serviceName): $new_task_def_arn"

        # Update the ECS service with the new task definition revision
        aws ecs update-service --cluster $(params.ecs-cluster-name) --service $(params.serviceName) --task-definition $new_task_def_arn

        echo "Service $(params.serviceName) updated with task definition revision $new_task_def_arn"

---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: ecs-cleanup
  namespace: <%= namespaceName %>
spec:
  params:
    - name: AWS_ACCESS_KEY_ID
      type: string
    - name: AWS_SECRET_ACCESS_KEY
      type: string
    - name: AWS_SESSION_TOKEN
      type: string
    - name: ecs-cluster-name
      type: string
    - name: serviceName
      type: string

  workspaces:
    - name: source
  steps:
    - name: rollback-to-previous-task-def
      image: amazon/aws-cli:latest
      env:
        - name: AWS_ACCESS_KEY_ID
          value: "$(params.AWS_ACCESS_KEY_ID)"
        - name: AWS_SECRET_ACCESS_KEY
          value: "$(params.AWS_SECRET_ACCESS_KEY)"
        - name: AWS_SESSION_TOKEN
          value: "$(params.AWS_SESSION_TOKEN)"
      script: |
        echo "Rolling back to previous task definitions for all services"
        # Extract the service name from the file name
        service=$(params.serviceName)
        file="/workspace/source/$(params.serviceName)-prev-task-def-arn.txt"

        # Ensure the file exists and contains data
        if [[ -f $file && -s $file ]]; then
          # Read the stored previous task definition ARN from the file
          prev_task_def_arn=$(cat $file)
          echo $prev_task_def_arn
          echo "Rolling back service $service to previous task definition $prev_task_def_arn"

          # Update the ECS service to use the previous task definition
          aws ecs update-service \
            --cluster $(params.ecs-cluster-name) \
            --service $service \
            --task-definition $prev_task_def_arn \
            --region us-east-2

          echo "Service $service rolled back to previous task definition $prev_task_def_arn"
        else
          echo "Error: Previous task definition for $service not found or empty. Skipping rollback for $service."
        fi

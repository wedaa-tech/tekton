apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: pp-api-pr-test-cases
  namespace: <%= namespaceName %>
spec:
  params:
    - name: repo-url
      type: string
    - name: commit-sha
      type: string
    - name: revision
      type: string
    - name: submodules
      type: string
    - name: git-branch
      type: string
    - name: head-branch
      type: string
    - name: dev-image-reference
      type: string
    - name: qa-image-reference
      type: string
    - name: staging-image-reference
      type: string
    - name: prod-image-reference
      type: string
    - name: clone-dir # Add this
      type: string

  workspaces:
    - name: shared-data
    - name: github-secret
    - name: docker-config # Add this
    - name: cache-dir # Add this

  tasks:
    - name: fetch-source
      taskRef:
        name: clone-repo
      workspaces:
        - name: source
          workspace: shared-data
        - name: github-secret
          workspace: github-secret
      params:
        - name: repo-url
          value: github.com/premiumparking/core_API_Automation.git
        - name: revision
          value: $(params.revision)
        - name: submodules
          value: $(params.submodules)
        - name: git-branch
          value: $(params.head-branch)
        - name: clone-dir
          value: core_API_Automation

    - name: get-commit-sha
      runAfter: ["fetch-source"]
      taskRef:
        name: get-commit-sha
      workspaces:
        - name: source
          workspace: shared-data
      params:
        - name: clone-dir
          value: "$(params.clone-dir)"

    - name: aws-auth
      runAfter: ["get-commit-sha"]
      taskRef:
        name: install-aws-cli-and-auth
      workspaces:
        - name: source
          workspace: shared-data
        - name: docker-config
          workspace: docker-config

      params:
        - name: dev-image
          value: $(params.dev-image-reference)
        - name: qa-image
          value: $(params.qa-image-reference)
        - name: staging-image
          value: $(params.staging-image-reference)
        - name: prod-image
          value: $(params.prod-image-reference)
        - name: git-branch
          value: $(params.git-branch)

    - name: build-push
      runAfter: ["aws-auth"]
      taskRef:
        name: build-and-push-kaniko
      workspaces:
        - name: source
          workspace: shared-data
        - name: docker-config
          workspace: docker-config
        - name: cache-dir
          workspace: cache-dir
      params:
        - name: repoUrl
          value: $(tasks.aws-auth.results.repoUrl)
        - name: clone-dir
          value: "$(params.clone-dir)"
        - name: commit_sha
          value: "$(tasks.get-commit-sha.results.commit-sha)"

    - name: set-environment-params
      runAfter: ["build-push"]
      taskSpec:
        params:
          - name: git-branch
            type: string
        results:
          - name: ecs-cluster-name
          - name: serviceNames
            type: array
          - name: apiEndpoint

        steps:
          - name: set-environment
            image: busybox
            script: |
              branchName=$(echo "$(params.git-branch)" | sed 's|^refs/heads/||')
              case "$branchName" in
                "development")
                  echo "Setting parameters for dev environment"
                  echo -n "DevCluster" > $(results.ecs-cluster-name.path)
                  echo -n '["pp-api", "pp-sidekiq", "pp-worker"]' > $(results.serviceNames.path)
                  echo -n "https://api.dev.premiumparking.com" > $(results.apiEndpoint.path)
                  ;;
                "qa")
                  echo "Setting parameters for QA environment"
                  echo -n "QA1Cluster_pp_enf" > $(results.ecs-cluster-name.path)
                  echo -n '["pp-api", "pp-api-pp-sidekiq", "pp-api-pp-worker"]' > $(results.serviceNames.path)
                  echo -n "https://api.qa1.premiumparking.com" > $(results.apiEndpoint.path)
                  ;;
                "staging")
                  echo "Setting parameters for staging environment"
                  echo -n "StagingCluster" > $(results.ecs-cluster-name.path)
                  echo -n '["pp-api", "pp-sidekiq", "pp-worker"]' > $(results.serviceNames.path)
                  echo -n "https://api.staging.premiumparking.com" > $(results.apiEndpoint.path)
                  ;;
                *)
                  echo "Branch not supported: $(params.git-branch)"
                  exit 1
                  ;;
              esac

      params:
        - name: git-branch
          value: $(params.git-branch)

    - name: temp-ecs-deploy
      runAfter: ["set-environment-params"]
      taskRef:
        name: temp-ecs-deploy
      workspaces:
        - name: source
          workspace: shared-data
        - name: docker-config
          workspace: docker-config
      matrix:
        params:
          - name: serviceName
            value: $(tasks.set-environment-params.results.serviceNames[*])
      params:
        - name: commit_sha
          value: $(tasks.get-commit-sha.results.commit-sha)
        - name: AWS_ACCESS_KEY_ID
          value: "$(tasks.aws-auth.results.AWS_ACCESS_KEY_ID)"
        - name: AWS_SECRET_ACCESS_KEY
          value: "$(tasks.aws-auth.results.AWS_SECRET_ACCESS_KEY)"
        - name: AWS_SESSION_TOKEN
          value: "$(tasks.aws-auth.results.AWS_SESSION_TOKEN)"
        - name: repoUrl
          value: "$(tasks.aws-auth.results.repoUrl)"
        - name: ecs-cluster-name
          value: "$(tasks.set-environment-params.results.ecs-cluster-name)"
        - name: clone-dir
          value: "$(params.clone-dir)"
        - name: region
          value: "us-east-2"

    - name: fetch-status
      runAfter: ["temp-ecs-deploy"]
      taskSpec:
        params:
          - name: AWS_ACCESS_KEY_ID
            type: string
          - name: AWS_SECRET_ACCESS_KEY
            type: string
          - name: AWS_SESSION_TOKEN
            type: string
          - name: ecs-cluster-name
            type: string
          - name: serviceName
            type: string
          - name: region
            type: string
          - name: apiEndpoint
            type: string
        steps:
          - name: wait-for-service
            image: amazon/aws-cli:latest
            env:
              - name: AWS_ACCESS_KEY_ID
                value: "$(params.AWS_ACCESS_KEY_ID)"
              - name: AWS_SECRET_ACCESS_KEY
                value: "$(params.AWS_SECRET_ACCESS_KEY)"
              - name: AWS_SESSION_TOKEN
                value: "$(params.AWS_SESSION_TOKEN)"
            script: |
              echo "Waiting for ECS service $(params.serviceName) to stabilize in cluster $(params.ecs-cluster-name)"

              max_attempts=30  # Timeout after approximately 5 minutes (30 * 10 seconds)
              attempts=0

              while [ $attempts -lt $max_attempts ]; do
                # Get desired tasks count
                desired_tasks=$(aws ecs describe-services \
                  --cluster $(params.ecs-cluster-name) \
                  --services $(params.serviceName) \
                  --region $(params.region) \
                  --query "services[0].desiredCount" --output text)

                # Get running tasks count
                running_tasks=$(aws ecs describe-services \
                  --cluster $(params.ecs-cluster-name) \
                  --services $(params.serviceName) \
                  --region $(params.region) \
                  --query "services[0].runningCount" --output text)

                # Check if the service has reached the desired count
                if [ "$desired_tasks" -eq "$running_tasks" ]; then
                  echo "Service $(params.serviceName) has stabilized with $running_tasks running tasks."
                  break
                else
                  echo "Waiting for service to stabilize... ($running_tasks/$desired_tasks running)"
                  sleep 10
                fi

                attempts=$((attempts + 1))
              done

              # If the loop exits without stabilizing, return an error
              if [ $attempts -eq $max_attempts ]; then
                echo "Service $(params.serviceName) did not stabilize within the expected time."
                exit 1
              fi

          - name: check-api-status
            image: curlimages/curl:latest
            script: |
              api_endpoint="$(params.apiEndpoint)/health_check"
              echo "Checking API status for $api_endpoint"

              max_attempts=10  # Try up to 10 times before failing
              attempts=0
              success=false

              while [ $attempts -lt $max_attempts ]; do
                # Make the API request
                response=$(curl -s -o /dev/null -w "%{http_code}" $api_endpoint)

                # Check if the API responded with HTTP 200
                if [ "$response" -eq 200 ]; then
                  echo "API is up and responding with HTTP 200 on $api_endpoint"
                  success=true
                  break
                else
                  echo "API check failed for $api_endpoint. HTTP status: $response. Retrying..."
                  sleep 10  # Wait for 10 seconds before retrying
                fi

                attempts=$((attempts + 1))
              done

              # If the loop exits without a successful response, return an error
              if [ "$success" = false ]; then
                echo "API check failed after $max_attempts attempts. API status: $response"
                exit 1
              fi

      params:
        - name: AWS_ACCESS_KEY_ID
          value: "$(tasks.aws-auth.results.AWS_ACCESS_KEY_ID)"
        - name: AWS_SECRET_ACCESS_KEY
          value: "$(tasks.aws-auth.results.AWS_SECRET_ACCESS_KEY)"
        - name: AWS_SESSION_TOKEN
          value: "$(tasks.aws-auth.results.AWS_SESSION_TOKEN)"
        - name: ecs-cluster-name
          value: "$(tasks.set-environment-params.results.ecs-cluster-name)"
        - name: region
          value: "us-east-2"
        - name: apiEndpoint
          value: "$(tasks.set-environment-params.results.apiEndpoint)"
        - name: serviceName
          value: "$(tasks.set-environment-params.results.serviceNames[0])"

    - name: test-cases
      runAfter: ["fetch-status"]
      taskRef:
        name: test-cases
      workspaces:
        - name: source
          workspace: shared-data
      params:
        - name: git-branch
          value: $(params.git-branch)
        - name: clone-dir
          value: core_API_Automation

  finally:
    - name: send-status-to-github
      taskRef:
        name: send-status-to-github
      params:
        - name: repo-url
          value: $(params.repo-url)
        - name: commit-sha
          value: $(params.commit-sha)
        - name: test-status
          value: $(tasks.test-cases.results.test-status)
        - name: coverage
          value: $(tasks.test-cases.results.coverage)
        - name: test-summary
          value: $(tasks.test-cases.results.test-summary)
      workspaces:
        - name: source
          workspace: shared-data
        - name: github-secret
          workspace: github-secret

    - name: ecs-cleanup-task
      taskRef:
        name: ecs-cleanup
      workspaces:
        - name: source
          workspace: shared-data
      params:
        - name: AWS_ACCESS_KEY_ID
          value: "$(tasks.aws-auth.results.AWS_ACCESS_KEY_ID)"
        - name: AWS_SECRET_ACCESS_KEY
          value: "$(tasks.aws-auth.results.AWS_SECRET_ACCESS_KEY)"
        - name: AWS_SESSION_TOKEN
          value: "$(tasks.aws-auth.results.AWS_SESSION_TOKEN)"
        - name: ecs-cluster-name
          value: $(tasks.set-environment-params.results.ecs-cluster-name)
      matrix:
        params:
          - name: serviceName
            value: $(tasks.set-environment-params.results.serviceNames[*])
